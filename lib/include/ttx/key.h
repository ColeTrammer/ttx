#pragma once

#include "di/reflect/enumerator.h"
#include "di/reflect/reflect.h"

// Key reference: https://sw.kovidgoyal.net/kitty/keyboard-protocol/
namespace ttx {
enum class Key {
    None,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,

    _0,
    _1,
    _2,
    _3,
    _4,
    _5,
    _6,
    _7,
    _8,
    _9,

    Backtick,
    Minus,
    Equal,
    Star,
    Plus,
    LeftBracket,
    RightBracket,
    BackSlash,
    SemiColon,
    Quote,
    Comma,
    Period,
    Slash,

    Escape,
    Enter,
    Tab,
    Backspace,
    Space,
    Insert,
    Delete,
    Left,
    Right,
    Up,
    Down,
    PageUp,
    PageDown,
    Home,
    End,
    CapsLock,
    ScrollLock,
    NumLock,
    PrintScreen,
    Pause,
    Menu,

    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    F25,
    F26,
    F27,
    F28,
    F29,
    F30,
    F31,
    F32,
    F33,
    F34,
    F35,

    KeyPad0,
    KeyPad1,
    KeyPad2,
    KeyPad3,
    KeyPad4,
    KeyPad5,
    KeyPad6,
    KeyPad7,
    KeyPad8,
    KeyPad9,
    KeyPadDecimal,
    KeyPadDivide,
    KeyPadMultiply,
    KeyPadSubtract,
    KeyPadAdd,
    KeyPadEnter,
    KeyPadEqual,
    KeyPadSeparator,
    KeyPadLeft,
    KeyPadRight,
    KeyPadUp,
    KeyPadDown,
    KeyPadPageUp,
    KeyPadPageDown,
    KeyPadHome,
    KeyPadEnd,
    KeyPadInsert,
    KeyPadDelete,
    KeyPadBegin,

    MediaPlay,
    MediaPause,
    MediaPlayPause,
    MediaReverse,
    MediaStop,
    MediaFastForward,
    MediaRewind,
    MediaTrackNext,
    MediaTrackPrevious,
    MediaRecord,
    LowerVolume,
    RaiseVolume,
    MuteVolume,

    ModifiersBegin,
    LeftShift,
    LeftControl,
    LeftAlt,
    LeftSuper,
    LeftHyper,
    LeftMeta,
    RightShift,
    RightControl,
    RightAlt,
    RightSuper,
    RightHyper,
    RightMeta,
    IsoLevel3Shift,
    IsoLevel5Shift,
    ModifiersEnd,

    KeyMax,
};

constexpr auto tag_invoke(di::Tag<di::reflect>, di::InPlaceType<Key>) {
    using enum Key;
    return di::make_enumerators<"Key">(
        di::enumerator<"None", None>, di::enumerator<"A", A>, di::enumerator<"B", B>, di::enumerator<"C", C>,
        di::enumerator<"D", D>, di::enumerator<"E", E>, di::enumerator<"F", F>, di::enumerator<"G", G>,
        di::enumerator<"H", H>, di::enumerator<"I", I>, di::enumerator<"J", J>, di::enumerator<"K", K>,
        di::enumerator<"L", L>, di::enumerator<"M", M>, di::enumerator<"N", N>, di::enumerator<"O", O>,
        di::enumerator<"P", P>, di::enumerator<"Q", Q>, di::enumerator<"R", R>, di::enumerator<"S", S>,
        di::enumerator<"T", T>, di::enumerator<"U", U>, di::enumerator<"V", V>, di::enumerator<"W", W>,
        di::enumerator<"X", X>, di::enumerator<"Y", Y>, di::enumerator<"Z", Z>, di::enumerator<"0", _0>,
        di::enumerator<"1", _1>, di::enumerator<"2", _2>, di::enumerator<"3", _3>, di::enumerator<"4", _4>,
        di::enumerator<"5", _5>, di::enumerator<"6", _6>, di::enumerator<"7", _7>, di::enumerator<"8", _8>,
        di::enumerator<"9", _9>, di::enumerator<"Backtick", Backtick>, di::enumerator<"Minus", Minus>,
        di::enumerator<"Equal", Equal>, di::enumerator<"Star", Star>, di::enumerator<"Plus", Plus>,
        di::enumerator<"LeftBracket", LeftBracket>, di::enumerator<"RightBracket", RightBracket>,
        di::enumerator<"BackSlash", BackSlash>, di::enumerator<"SemiColon", SemiColon>, di::enumerator<"Quote", Quote>,
        di::enumerator<"Comma", Comma>, di::enumerator<"Period", Period>, di::enumerator<"Slash", Slash>,
        di::enumerator<"Escape", Escape>, di::enumerator<"Enter", Enter>, di::enumerator<"Tab", Tab>,
        di::enumerator<"Backspace", Backspace>, di::enumerator<"Space", Space>, di::enumerator<"Insert", Insert>,
        di::enumerator<"Delete", Delete>, di::enumerator<"Left", Left>, di::enumerator<"Right", Right>,
        di::enumerator<"Up", Up>, di::enumerator<"Down", Down>);
}
}
